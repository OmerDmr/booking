(()=>{var e={646:function(e){e.exports=function(){"use strict";function e(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)e[n]=o[n]}return e}return function t(o,n){function i(t,i,s){if("undefined"!=typeof document){"number"==typeof(s=e({},n,s)).expires&&(s.expires=new Date(Date.now()+864e5*s.expires)),s.expires&&(s.expires=s.expires.toUTCString()),t=encodeURIComponent(t).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var r="";for(var a in s)s[a]&&(r+="; "+a,!0!==s[a]&&(r+="="+s[a].split(";")[0]));return document.cookie=t+"="+o.write(i,t)+r}}return Object.create({set:i,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var t=document.cookie?document.cookie.split("; "):[],n={},i=0;i<t.length;i++){var s=t[i].split("="),r=s.slice(1).join("=");try{var a=decodeURIComponent(s[0]);if(n[a]=o.read(r,a),e===a)break}catch(e){}}return e?n[e]:n}},remove:function(t,o){i(t,"",e({},o,{expires:-1}))},withAttributes:function(o){return t(this.converter,e({},this.attributes,o))},withConverter:function(o){return t(e({},this.converter,o),this.attributes)}},{attributes:{value:Object.freeze(n)},converter:{value:Object.freeze(o)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"})}()},445:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CookieCategoriesService=void 0;const n=o(605);t.CookieCategoriesService=class{constructor(e){this.storage=e,this.allowedCategories=[],this.allowedCategories=this.getFromStorage()}getAll(){return[n.CookieCategory.ESSENTIAL,n.CookieCategory.CUSTOMIZATION,n.CookieCategory.ANALYTICAL,n.CookieCategory.MARKETING,n.CookieCategory.NON_CLASSIFIED]}setAllowed(e){this.store(e),this.allowedCategories=this.getFromStorage()}categoryAllowed(e){return this.allowedCategories.includes(e)}matchCategoriesStr(e){const t=this.str2CookieCategories(e);return 0!==t.length&&t.reduce(((e,t)=>e&&this.categoryAllowed(t)),!0)}str2CookieCategories(e){return e.split(",").filter((e=>Object.values(n.CookieCategory).includes(e))).map((e=>e))}getFromStorage(){let e=this.storage.get();void 0===e&&(e="");const t=this.str2CookieCategories(e);return t.includes(n.CookieCategory.ESSENTIAL)||t.push(n.CookieCategory.ESSENTIAL),t}store(e){e.includes(n.CookieCategory.ESSENTIAL)||e.push(n.CookieCategory.ESSENTIAL),this.storage.set(e.join(","))}}},605:(e,t)=>{"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),t.CookieCategory=void 0,function(e){e.ESSENTIAL="essential",e.CUSTOMIZATION="customization",e.ANALYTICAL="analytical",e.MARKETING="marketing",e.NON_CLASSIFIED="non-classified"}(o||(t.CookieCategory=o={}))},734:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CookiesConsentManagementService=void 0;const n=o(445),i=o(346),s=o(453),r=o(678),a=o(914),l=o(755),c=o(352),d=o(414),u=o(996),h=o(661),m="SCRIPT",v="IFRAME";t.CookiesConsentManagementService=class{constructor(e={}){this.nodeNamesPrevented=[m,v],this.showCookiesBannerService=new i.ShowCookiesBannerService(new s.CookieStorage("bnn-ccm")),this.cookiesCategoryService=new n.CookieCategoriesService(new s.CookieStorage("bnn-ccm__config")),this.htmlElementLoaderManager=new c.HtmlElementLoaderManager(new d.HtmlElementLoader),this.htmlElementLoaderManager.pushLoader(m,new u.HtmlScriptElementLoader),this.htmlElementLoaderManager.pushLoader(v,new h.HtmlIframeElementLoader),this.createElementInterceptor=new l.CreateElementInterceptor(this.htmlElementLoaderManager,this.nodeNamesPrevented),this.translations=e}manage(){this.createElementInterceptor.init(),window.onload=()=>{var e,t;this.layer=new a.CookiesConfigurationLayer(this.cookiesCategoryService,(()=>{this.showCookiesBannerService.setAsShown(),this.loadAllowedCategories()}),null!==(e=this.translations.layer)&&void 0!==e?e:{}),this.banner=new r.CookiesBanner(this.showCookiesBannerService,this.cookiesCategoryService,(()=>{this.loadAllowedCategories()}),(()=>{var e;null===(e=this.layer)||void 0===e||e.show()}),null!==(t=this.translations.banner)&&void 0!==t?t:{});const o=document.getElementsByClassName("bnn-ccm__show-config");for(let e=0;e<o.length;e++)o[e].addEventListener("click",(()=>{var e;null===(e=this.layer)||void 0===e||e.show()}));this.loadAllowedCategories()}}loadAllowedCategories(){this.loadHtmlElementsAllowed(),this.pushToGtm()}loadHtmlElementsAllowed(){this.nodeNamesPrevented.forEach((e=>{const t=this.htmlElementLoaderManager.getLoader(e),o=document.getElementsByTagName(e.toLowerCase());for(let e=0;e<o.length;e++){let n=o[e].getAttribute("bnn-ccm__category");null!==n&&this.cookiesCategoryService.matchCategoriesStr(n)&&t.load(o[e])}}))}pushToGtm(){void 0!==window.dataLayer&&this.cookiesCategoryService.getAll().forEach((e=>{this.cookiesCategoryService.categoryAllowed(e)?window.dataLayer.push({event:"bnn-ccm__consent-"+e}):window.dataLayer.push({event:"bnn-ccm__no-consent-"+e})}))}}},755:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CreateElementInterceptor=void 0,t.CreateElementInterceptor=class{constructor(e,t){this.loader=e,this.nodeNamesPrevented=t}init(){new MutationObserver((e=>{e.forEach((({addedNodes:e})=>{e.forEach((e=>{1===e.nodeType&&this.nodeNamesPrevented.includes(e.nodeName)&&this.loader.preventLoad(e)}))}))})).observe(document.documentElement,{childList:!0,subtree:!0})}}},352:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HtmlElementLoaderManager=void 0;const n=o(414);class i extends n.HtmlElementLoader{constructor(e){super(),this.loaders=[],this.defaultLoader=e}pushLoader(e,t){this.loaders.push({key:e,loader:t})}preventLoad(e){this.getLoader(e.nodeName).preventLoad(e)}allow(e){this.getLoader(e.nodeName).allow(e)}load(e){this.getLoader(e.nodeName).load(e)}getLoader(e){let t=null;return this.loaders.forEach((o=>{e===o.key&&(t=o.loader)})),null!=t?t:this.defaultLoader}}t.HtmlElementLoaderManager=i},414:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HtmlElementLoader=void 0,t.HtmlElementLoader=class{isElementAllowed(e){const t=e.getAttribute("bnn-ccm__category"),o=e.getAttribute("bnn-ccm__allowed");return null===t||"allowed"===o}preventLoad(e){if(this.isElementAllowed(e))return;const t=e.getAttribute("src");null!==t&&(e.setAttribute("bnn-ccm__src",t),e.removeAttribute("src"))}allow(e){const t=e.getAttribute("bnn-ccm__src");e.onload=()=>{document.dispatchEvent(new Event("DOMContentLoaded"))},null!==t&&(e.setAttribute("src",t),e.removeAttribute("bnn-ccm__src")),e.setAttribute("bnn-ccm__allowed","allowed")}load(e){var t;if("allowed"===e.getAttribute("bnn-ccm__allowed"))return;const o=e.cloneNode(!0);this.allow(o),null===(t=e.parentNode)||void 0===t||t.insertBefore(o,e),e.remove()}}},661:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HtmlIframeElementLoader=void 0;const n=o(414);class i extends n.HtmlElementLoader{}t.HtmlIframeElementLoader=i},996:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HtmlScriptElementLoader=void 0;const n=o(414);class i extends n.HtmlElementLoader{preventLoad(e){this.isElementAllowed(e)||(super.preventLoad(e),e.type="text/plain")}allow(e){super.allow(e),e.type="text/javascript"}load(e){super.load(e)}}t.HtmlScriptElementLoader=i},346:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ShowCookiesBannerService=void 0,t.ShowCookiesBannerService=class{constructor(e){this.storage=e}mustShow(){return void 0===this.storage.get()}setAsShown(){this.storage.set("shown")}}},453:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CookieStorage=void 0;const i=n(o(646));t.CookieStorage=class{constructor(e){this.cookieName=e}get(){const e=i.default.get(this.cookieName);return void 0!==e&&this.set(e),e}set(e){i.default.set(this.cookieName,e,{expires:365,path:"/",sameSite:"lax"})}}},566:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cookiesBannerContent=void 0,t.cookiesBannerContent={title:"Cookies",text:"This website and selected partners gather personal information. You can give consent and set your preferences by selecting the options below. If you wish that your personal information is not shared with third-parties, please click Do not sell my personal information.","show-config-btn":"Cookie Preferences","reject-all-btn":"Reject all cookies","accept-all-btn":"Accept all cookies"}},836:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cookiesBannerTemplate=void 0,t.cookiesBannerTemplate='\n<dialog class="cookie-banner shadow">\n    <div class="cookie-banner__header">\n        <h3 class="cookie-banner__title text-style-5"> {{ title }} </h3>\n    </div>\n    <div class="cookie-banner__info">\n        <p class="cookie-banner__rich-text rich-text">\n            {{ text }}\n        </p>\n    </div>\n    <div class="cookie-banner__action">\n        <button class="button button--outline border-color--dark text-color--dark" title="" id="bnn-ccm__banner-show-config">\n            {{ show-config-btn }}\n        </button>\n        <button class="button button--outline border-color--dark text-color--dark" title="" id="bnn-ccm__banner-reject-all">\n            {{ reject-all-btn }}\n        </button>\n        <button class="button button--primary bg-color--dark text-color--contrast-2" title="" id="bnn-ccm__banner-accept-all">\n            {{ accept-all-btn }}\n        </button>\n    </div>\n</dialog>\n'},678:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CookiesBanner=void 0;const n=o(368),i=o(836),s=o(566),r=o(355);t.CookiesBanner=class{constructor(e,t,o,a,l={}){this.showCookiesBannerService=e,this.cookiesCategoryService=t,this.onSetCategoriesAndClose=o,this.onShowConfig=a,this.showCookiesBannerService.mustShow()&&(this.element=(0,r.html2Element)((0,n.render)(i.cookiesBannerTemplate,Object.assign(Object.assign({},s.cookiesBannerContent),l))),this.addListeners(),this.show(),document.getElementsByTagName("body")[0].insertAdjacentElement("beforeend",this.element))}hide(){var e;null===(e=this.element)||void 0===e||e.removeAttribute("open")}show(){var e;null===(e=this.element)||void 0===e||e.setAttribute("open","yes")}addListeners(){var e,t,o,n,i,s;null===(t=null===(e=this.element)||void 0===e?void 0:e.querySelector("#bnn-ccm__banner-show-config"))||void 0===t||t.addEventListener("click",(()=>{this.hide(),this.onShowConfig()})),null===(n=null===(o=this.element)||void 0===o?void 0:o.querySelector("#bnn-ccm__banner-reject-all"))||void 0===n||n.addEventListener("click",(()=>{this.cookiesCategoryService.setAllowed([]),this.setAsShownAndHide(),this.onSetCategoriesAndClose()})),null===(s=null===(i=this.element)||void 0===i?void 0:i.querySelector("#bnn-ccm__banner-accept-all"))||void 0===s||s.addEventListener("click",(()=>{this.cookiesCategoryService.setAllowed(this.cookiesCategoryService.getAll()),this.setAsShownAndHide(),this.onSetCategoriesAndClose()}))}setAsShownAndHide(){this.showCookiesBannerService.setAsShown(),this.hide()}}},243:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CookiesConfigurationLayerContent=void 0,t.CookiesConfigurationLayerContent={title:"Advanced Cookie Options",text:"While some cookies are important for the functionality of the site others ensure a better and more customised user experience. The collected data might be used for marketing or analytic purposes.","show-more":"More Information","show-more-link":"#","essential.title":"Essential","essential.text":"These cookies are required to enable basic website functionality.","customization.title":"Customization","customization.text":"These cookies allow us to remember relevant information in order to differentiate between users and offer them a personal experience.","analytical.title":"Analytical","analytical.text":"These cookies allow us to monitor and analyze the use of our website by users.","marketing.title":"Marketing","marketing.text":"These cookies are used to offer targeted and personalized advertising based on of the user's profile.","non-classified.title":"Non-classified","non-classified.text":"These cookies haven't been classified into cookie categories according to their type and purpose","privacy-label":"Read our Privacy Policy","privacy-link":"#","reject-btn":"Reject All","accept-btn":"Accept Selection","accept-all-btn":"Accept All"}},337:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cookiesConfigurationLayerTemplate=void 0,t.cookiesConfigurationLayerTemplate='\n<div class="modal modal__cookies">\n    <div class="modal__box">\n        \x3c!--<button type="button" title="close" aria-label="close" class="modal__close" id="bnn-ccm__layer-close">\n            <svg class="button__left-icon icon">\n                <use href="/images/svg-symbols.svg#icon--close" fill="images/svg-symbols.svg" />\n            </svg>\n        </button>--\x3e\n        <div class="modal__box-inner">\n            <p class="modal__title">{{ title }}</p>\n            <p class="modal__text">{{ text }}</p>\n            <a href="{{ show-more-link }}" target="_blank" class="modal__link">{{ show-more }}</a>\n\n            <div class="modal__cookies-option__wrapper">\n                <div class="modal__cookies-option">\n                    <p class="modal__text">\n                        <b>{{ essential.title }}</b>\n                        {{ essential.text }}\n                    </p>\n                    <div class="field">\n                        <div class="field__wrapper">\n                            <div class="switch">\n                                <input id="bnn-ccm__switch__essential" class="switch__input" type="checkbox" name="switch-essential" disabled>\n                                <label for="switch0" class="switch__label" bnn-cmm__label-category="essential"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="modal__cookies-option">\n                    <p class="modal__text">\n                        <b>{{ customization.title }}</b>\n                        {{ customization.text }}\n                    </p>\n                    <div class="field">\n                        <div class="field__wrapper">\n                            <div class="switch">\n                                <input id="bnn-ccm__switch__customization" class="switch__input" type="checkbox" name="switch-customization">\n                                <label for="switch1" class="switch__label" bnn-cmm__label-category="customization"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="modal__cookies-option">\n                    <p class="modal__text">\n                        <b>{{ analytical.title }}</b>\n                        {{ analytical.text }}\n                    </p>\n                    <div class="field">\n                        <div class="field__wrapper">\n                            <div class="switch">\n                                <input id="bnn-ccm__switch__analytical" class="switch__input" type="checkbox" name="switch-analytical">\n                                <label for="switch2" class="switch__label" bnn-cmm__label-category="analytical"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="modal__cookies-option">\n                    <p class="modal__text">\n                        <b>{{ marketing.title }}</b>\n                        {{ marketing.text }}\n                    </p>\n                    <div class="field">\n                        <div class="field__wrapper">\n                            <div class="switch">\n                                <input id="bnn-ccm__switch__marketing" class="switch__input" type="checkbox" name="switch-marketing">\n                                <label for="switch2" class="switch__label" bnn-cmm__label-category="marketing"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="modal__cookies-option">\n                    <p class="modal__text">\n                        <b>{{ non-classified.title }}</b>\n                        {{ non-classified.text }}\n                    </p>\n                    <div class="field">\n                        <div class="field__wrapper">\n                            <div class="switch">\n                                <input id="bnn-ccm__switch__non-classified" class="switch__input" type="checkbox" name="switch-non-classified">\n                                <label for="switch2" class="switch__label" bnn-cmm__label-category="non-classified"></label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <a href="{{ privacy-link }}" target="_blank" class="modal__link">{{ privacy-label }}</a>\n            \n            <div class="modal__cookies-footer">\n                <button class="button button--outline border-color--dark text-color--dark" title="" id="bnn-ccm__layer-reject">\n                    {{ reject-btn }}\n                </button>\n                <button class="button button--outline border-color--dark text-color--dark" title="" id="bnn-ccm__layer-accept">\n                    {{ accept-btn }}\n                </button>\n                <button class="button button--primary bg-color--dark text-color--contrast-2" title="" id="bnn-ccm__layer-accept-all">\n                    {{ accept-all-btn }}\n                </button>\n            </div>\n        </div>\n    </div>\n    <div class="modal__background js-modal-background"></div>\n</div>\n'},914:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CookiesConfigurationLayer=void 0;const n=o(355),i=o(368),s=o(337),r=o(605),a=o(243);t.CookiesConfigurationLayer=class{constructor(e,t,o={}){this.cookiesCategoryService=e,this.onSetCategoriesAndClose=t,this.element=(0,n.html2Element)((0,i.render)(s.cookiesConfigurationLayerTemplate,Object.assign(Object.assign({},a.CookiesConfigurationLayerContent),o))),this.setSwitchers(),this.addListeners(),document.getElementsByTagName("body")[0].insertAdjacentElement("beforeend",this.element)}hide(){this.element.classList.remove("is-visible")}show(){this.setSwitchers(),this.element.classList.add("is-visible")}setSwitchers(){this.cookiesCategoryService.getAll().forEach((e=>{const t=this.element.querySelector("#bnn-ccm__switch__"+e);this.cookiesCategoryService.categoryAllowed(e)&&(null==t||t.setAttribute("checked","yes"))}))}uncheckSwitchers(){this.cookiesCategoryService.getAll().forEach((e=>{const t=this.element.querySelector("#bnn-ccm__switch__"+e);this.cookiesCategoryService.categoryAllowed(e)&&e!==r.CookieCategory.ESSENTIAL&&(null==t||t.removeAttribute("checked"))}))}categoriesFromSwitchers(){return this.cookiesCategoryService.getAll().filter((e=>{const t=this.element.querySelector("#bnn-ccm__switch__"+e);return null==t?void 0:t.getAttribute("checked")}))}addListeners(){var e,t,o;null===(e=this.element.querySelector("#bnn-ccm__layer-reject"))||void 0===e||e.addEventListener("click",(()=>{this.uncheckSwitchers(),this.cookiesCategoryService.setAllowed(this.categoriesFromSwitchers()),this.hide(),this.onSetCategoriesAndClose()})),null===(t=this.element.querySelector("#bnn-ccm__layer-accept"))||void 0===t||t.addEventListener("click",(()=>{this.cookiesCategoryService.setAllowed(this.categoriesFromSwitchers()),this.hide(),this.onSetCategoriesAndClose()})),null===(o=this.element.querySelector("#bnn-ccm__layer-accept-all"))||void 0===o||o.addEventListener("click",(()=>{this.cookiesCategoryService.setAllowed(this.cookiesCategoryService.getAll()),this.setSwitchers(),this.hide(),this.onSetCategoriesAndClose()}));const n=this.element.getElementsByClassName("switch__label");for(let e=0;e<n.length;e++)n[e].addEventListener("click",(e=>{const t=e.target.getAttribute("bnn-cmm__label-category"),o=this.element.querySelector("#bnn-ccm__switch__"+t);null===(null==o?void 0:o.getAttribute("disabled"))&&((null==o?void 0:o.getAttribute("checked"))?null==o||o.removeAttribute("checked"):null==o||o.setAttribute("checked","yes"))}))}}},355:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.html2Element=void 0,t.html2Element=e=>{const t=document.createElement("template");return t.innerHTML=e.trim(),t.content.firstChild}},368:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.render=void 0,t.render=(e,t)=>{for(let o in t)e=e.replace("{{ "+o+" }}",t[o]);return e}}},t={};function o(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,o),s.exports}(()=>{"use strict";const e=o(734);window.BnnCcm=e.CookiesConsentManagementService})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
